// Code Generated by Sidekick is for learning and experimentation purposes only.
package com.demo.testamc.service;

import com.demo.testamc.dto.LoginRequest;
import com.demo.testamc.dto.LoginResponse;
import com.demo.testamc.dto.SignupRequest;
import com.demo.testamc.enums.UserType;
import com.demo.testamc.models.User;
import com.demo.testamc.repository.UserRepository;
import com.demo.testamc.service.impl.AuthServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class AuthServiceImplTest {

    @Mock
    private UserRepository userRepository;

    @Mock
    private PasswordEncoder passwordEncoder;

    @InjectMocks
    private AuthServiceImpl authService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testLogin_Success() {
        LoginRequest loginRequest = new LoginRequest();
        loginRequest.setEmail("test@example.com");
        loginRequest.setPassword("password123");

        User user = User.builder()
                .email("test@example.com")
                .password("hashedPassword")
                .role(UserType.USER.toString())
                .fullName("Test User")
                .build();

        when(userRepository.findByEmail("test@example.com")).thenReturn(Optional.of(user));
        when(passwordEncoder.matches("password123", "hashedPassword")).thenReturn(true);

        LoginResponse response = authService.login(loginRequest);

        assertNotNull(response);
        assertEquals("Test User", response.getName());
        assertEquals(UserType.USER.toString(), response.getRole());
        assertEquals("test@example.com", response.getEmail());
    }

    @Test
    void testLogin_Failure_WrongPassword() {
        LoginRequest loginRequest = new LoginRequest();
        loginRequest.setEmail("test@example.com");
        loginRequest.setPassword("wrongpassword");

        User user = User.builder()
                .email("test@example.com")
                .password("hashedPassword")
                .role(UserType.USER.toString())
                .fullName("Test User")
                .build();

        when(userRepository.findByEmail("test@example.com")).thenReturn(Optional.of(user));
        when(passwordEncoder.matches("wrongpassword", "hashedPassword")).thenReturn(false);

        LoginResponse response = authService.login(loginRequest);

        assertNotNull(response);
        assertNull(response.getName());
        assertNull(response.getRole());
        assertNull(response.getEmail());
    }

    @Test
    void testLogin_Failure_UserNotFound() {
        LoginRequest loginRequest = new LoginRequest();
        loginRequest.setEmail("notfound@example.com");
        loginRequest.setPassword("password123");

        when(userRepository.findByEmail("notfound@example.com")).thenReturn(Optional.empty());

        LoginResponse response = authService.login(loginRequest);

        assertNotNull(response);
        assertNull(response.getName());
        assertNull(response.getRole());
        assertNull(response.getEmail());
    }

    @Test
    void testSignup_Success() {
        SignupRequest signupRequest = new SignupRequest();
        signupRequest.setEmail("newuser@example.com");
        signupRequest.setPassword("newpassword");
        signupRequest.setContactNumber("1234567890");
        signupRequest.setFullName("New User");
        signupRequest.setPan("ABCDE1234F");
        signupRequest.setAddress("123 Main St");

        User savedUser = User.builder()
                .email("newuser@example.com")
                .password("encodedPassword")
                .role(UserType.USER.toString())
                .contactNumber("1234567890")
                .fullName("New User")
                .pan("ABCDE1234F")
                .address("123 Main St")
                .build();

        when(passwordEncoder.encode("newpassword")).thenReturn("encodedPassword");
        when(userRepository.save(any(User.class))).thenReturn(savedUser);

        User result = authService.signup(signupRequest);

        assertNotNull(result);
        assertEquals("newuser@example.com", result.getEmail());
        assertEquals("encodedPassword", result.getPassword());
        assertEquals(UserType.USER.toString(), result.getRole());
        assertEquals("New User", result.getFullName());
    }
}
